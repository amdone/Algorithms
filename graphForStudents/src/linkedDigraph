/*
 * linkedDigraph.h
 *
 *  Created on: 2017年4月8日
 *      Author: lsn
 */

#ifndef SRC_LINKEDDIGRAPH_
#define SRC_LINKEDDIGRAPH_
#include <algorithm>
#include <queue>
#include "graph.h"
#include "graphChain"
#include "vertexIterator.h"
#include "unweightedEdge.h"


class linkedDigraph : public graph<bool>{
   protected:
      int n;                      // number of vertices
      int e;                      // number of edges
      graphChain<int> *aList;     // adjacency lists

   public:
      linkedDigraph(int numberOfVertices);
      ~linkedDigraph() {delete [] aList;}
      int numberOfVertices() const {return n;}
      int numberOfEdges() const {return e;}
      bool directed() const {return true;}
      bool weighted() const {return false;}
      bool existsEdge(int i, int j) const;
      int degree(int theVertex) const;
      int outDegree(int theVertex) const;
      int inDegree(int theVertex) const;
      void insertEdge(edge<bool> *theEdge);
      void insertEdgeNoCheck(edge<bool> *theEdge);
      void eraseEdge(int i, int j);
      void output(std::ostream& out) const;
      void bfs(int v, int reach[], int label);




   protected:
      void checkVertex(int theVertex) const;

   public:
      class myIterator : public vertexIterator<bool>{
         public:
            myIterator(chainNode<int> *theNode) {currentNode = theNode;}

            ~myIterator() {}

            int next()
            {// Return next vertex if any. Return 0 if no next vertex.
               // find next adjacent vertex
               if (currentNode == NULL)
                  return 0;
               int nextVertex = currentNode->element;
               currentNode = currentNode->next;
               return nextVertex;
            }
            int next(bool& theWeight)
            {// Return next vertex if any. Return 0 if no next vertex.
             // Set theWeight = edge weight.
               // find next adjacent vertex
               if (currentNode == NULL)
                  return 0;
               int nextVertex = currentNode->element;
               currentNode = currentNode->next;
               theWeight = true;
               return nextVertex;
            }

         protected:
            chainNode<int> *currentNode;
      };
      myIterator* iterator(int theVertex){
          checkVertex(theVertex);
          return new myIterator(aList[theVertex].firstNode);//firstNode是protected，需要声明为友元，或者调用函数
       }
};

//std::ostream& operator<<(std::ostream& out, const linkedDigraph& x);

linkedDigraph::linkedDigraph(int numberOfVertices) {
	if (numberOfVertices < 0)
          throw std::out_of_range("number of vertices must be >= 0");
	n = numberOfVertices;
    e = 0;
    aList = new graphChain<int> [n + 1];//不使用第0个元素
}

void linkedDigraph::checkVertex(int theVertex) const{
   if (theVertex < 1 || theVertex > n)
      throw std::out_of_range("no vertex");
}

bool linkedDigraph::existsEdge(int i, int j) const{
    if (i < 1 || j < 1 || i > n || j > n || aList[i].indexOf(j) == -1)
       return false;
    else
       return true;
 }

int linkedDigraph::degree(int theVertex) const{
	throw std::invalid_argument("degree() undefined");
}

 int linkedDigraph::outDegree(int theVertex) const{
    checkVertex(theVertex);
    return aList[theVertex].size();
 }
 int linkedDigraph::inDegree(int theVertex) const{
    checkVertex(theVertex);
    // count in-edges at vertex theVertex
    int sum = 0;
    for (int j = 1; j <= n; j++)
       if (aList[j].indexOf(theVertex) != -1) ++sum;
     return sum;
 }

 void linkedDigraph::insertEdge(edge<bool> *theEdge){// Insert an edge.
    int v1 = theEdge->vertex1();
    int v2 = theEdge->vertex2();
    if (v1 < 1 || v2 < 1 || v1 > n || v2 > n || v1 == v2)
       throw std::out_of_range("not a permissible edge");

    if (aList[v1].indexOf(v2) == -1){// new edge
       aList[v1].insert(0, v2);
       ++e;
    }
 }
 void linkedDigraph::insertEdgeNoCheck(edge<bool> *theEdge){
	 // Insert an edge. No validation checks performed.
    aList[theEdge->vertex1()].insert(0, theEdge->vertex2());
    ++e;
 }
 void linkedDigraph::eraseEdge(int i, int j){
    if (i >= 1 && j >= 1 && i <= n && j <= n)
    {
       int *v = aList[i].eraseElement(j);
       if (v != NULL)  // edge (i,j) did exist
          --e;
    }
 }
 void linkedDigraph::output(std::ostream& out) const
 {// Output the adjacency matrix.
    for (int i = 1; i <= n; i++)
       out << i<<"==>"<<aList[i];
 }
 void linkedDigraph::bfs(int v, int reach[], int label)
 {// Breadth-first search. reach[i] is set to label for
  // all vertices reachable from vertex v.
    std::queue<int> q;
    reach[v] = label;
    q.push(v);
    while (!q.empty())
    {
       // remove a labeled vertex from the queue
       int w = q.front();
       q.pop();
       // mark all unreached vertices adjacent from w
       for (chainNode<int>* u = aList[w].firstNode;//不使用迭代器
                            u != NULL; u = u->next)
          // visit an adjacent vertex of w
          if (reach[u->element] == 0)
          {// u->element is an unreached vertex
             q.push(u->element);
             reach[u->element] = label; // mark reached
          }
    }
 }
 std::ostream& operator<<(std::ostream& out, const linkedDigraph& x){
	 x.output(out);
	 return out;
 }





#endif /* SRC_LINKEDDIGRAPH_ */
